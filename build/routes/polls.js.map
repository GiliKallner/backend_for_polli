{"version":3,"sources":["../../src/routes/polls.js"],"names":["express","isEmpty","Poll","router","Router","validateInput","question","options","errors","length","match","isValid","delete","req","res","callback","err","status","json","params","pollId","deletePoll","get","polls","getUsersPolls","userId","poll","getPollById","put","_id","opt_id","body","vote","poll_id","map","opt","option","votes","console","log","updatePoll","post","user_id","saveNewPoll","owner","username","type","query"],"mappings":"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","file":"polls.js","sourcesContent":["import express  from 'express';\nimport { isEmpty } from 'lodash';\n\nimport { Poll } from '../models/poll';\n\nlet router = express.Router();\n\n\nconst validateInput = ({ question, options }) => {\n   \n    let errors = {};\n    \n    if ( question && isEmpty(question) ) errors.question = 'A question is requiered to start a poll';\n    if ( options.length < 2 ) errors.options = 'Polls need at list two options to vote from.';\n    if ( question ) question = question.match(/\\?$|!$|\\.$/g) ? question: question+'?';\n    \n    return {\n      errors,\n      isValid: isEmpty(errors),\n      question\n    };\n};\n\n\n\n/*-------------------------------------------------------*/\n// delete a poll\n\nrouter.delete('/:pollId', (req,res) => {\n    const callback = err => {\n        if(err) return res.status(500).json('Something went wrong');\n        res.status(200).json( req.params.pollId ); \n    };\n    \n    Poll.deletePoll ( req.params.pollId, callback );\n});\n\n\n/*-------------------------------------------------------*/\n// retrive user's polls\n\nrouter.get('/:userId', (req,res) => {\n    const callback = ( err, polls ) => { \n        if(err) return res.status(404).json('There are no polls yet in your repository');\n        return res.status(200).json(polls);\n    };\n    \n    Poll.getUsersPolls( req.params.userId, callback );\n});\n                \n\n/*-------------------------------------------------------*/\n// get a single poll by it's id\n\nrouter.get('/poll/:pollId', (req,res) => {\n    \n    const { pollId } = req.params;\n    \n    const callback = ( err, poll ) =>{\n        if(err) return res.status(500).json('Something went wrong');\n        return res.status(200).json(poll);\n    };\n\n    Poll.getPollById( pollId, callback );\n    \n});\n\n/*-------------------------------------------------------*/\n// vote for a single option in a poll\nrouter.put('/vote', (req,res) => {\n   \n    const { _id, opt_id } = req.body;\n\n    const callback = ( err, poll ) => {\n        if (err) return res.status(500).json(err);\n        res.status(200).json({_id, opt_id});\n    };\n\n    Poll.vote( _id, opt_id, callback );\n});\n\n\n/*-------------------------------------------------------*/\n// update a single poll\n\nrouter.put('/', (req,res) => {\n    let {errors, isValid, question } = validateInput(req.body);\n    \n    if( !isValid ) return res.status(401).json(errors);\n    \n    let { options, poll_id } = req.body;\n\n    options = options.map(opt => { \n        if(typeof opt === 'object') return { option: opt.option, votes: opt.votes };\n        return { option:opt };\n    });\n    \n    const callback = ( poll, err ) => {\n        if (err) {\n            console.log('update-error: ',err);\n            return res.status(500).json(errors);\n        }\n        console.log('updated- poll: ',poll);\n        res.status(200).json(poll);\n    };\n\n    Poll.updatePoll( { question, options }, poll_id, callback );\n});\n\n\n\n/*-------------------------------------------------------*/\n// save a new poll\n\nrouter.post('/',(req,res) => {\n    const {errors, isValid, question } = validateInput(req.body);\n    if( !isValid ) return res.status(401).json(errors);\n    \n    let { options, user_id } = req.body;\n   \n        options = options.map(opt => {return { option:opt }});\n        \n        const callback = (err, poll) => {\n            if (err) return res.status(401).json('User is not logged in'); \n            res.status(200).json(poll) ;\n        };\n        \n        Poll.saveNewPoll({ question, options, user_id }, callback );\n\n});\n\n/*-------------------------------------------------------*/\n// home page - view all polls filtered by a given category\n\nrouter.get('/',(req, res) => {\n    const callback = ( err, polls ) => {\n            if (err) {console.log('err: ',err); return res.status(500).json('Something went wrong')}; \n            polls = polls.map( poll => {\n                poll.owner = poll.owner.username;\n                return poll;\n            });\n            res.status(200).json(polls) ;\n    };\n    \n    const type =    {   'all' : 'getAllPolls',\n                        'most-recent' : 'getRecentPolls',\n                        'most-popular' : 'getMostPopularPolls'\n                    }[req.query.type];\n    \n    Poll[type](callback);\n});\n\nexport default router;"]}