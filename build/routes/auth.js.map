{"version":3,"sources":["../../src/routes/auth.js"],"names":["express","config","jwt","User","router","Router","post","req","res","identifier","password","body","findUser","then","users","length","status","json","errors","form","user","comparePasswords","match","token","sign","id","_id","username","jwtSecret","err"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;;AAEA,SAASC,IAAT,QAAqB,gBAArB;;AAEA,IAAIC,SAASJ,QAAQK,MAAR,EAAb;;AAEAD,OAAOE,IAAP,CAAY,GAAZ,EAAiB,CAACC,GAAD,EAAMC,GAAN,KAAc;;AAE3B,UAAM,EAAEC,UAAF,EAAcC,QAAd,KAA2BH,IAAII,IAArC;;AAEIR,SAAKS,QAAL,CAAeH,UAAf,EAA2BA,UAA3B,EACCI,IADD,CACMC,SAAS;AACX,YAAG,CAACA,MAAMC,MAAV,EAAkB,OAAOP,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,QAAQ,EAACC,MAAM,qBAAP,EAAV,EAArB,CAAP;;AAElB,cAAMC,OAAON,MAAM,CAAN,CAAb;AACAM,aAAKC,gBAAL,CAAsBX,QAAtB,EAAgCY,SAAS;;AAErC,gBAAG,CAACA,KAAJ,EAAW,OAAOd,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,QAAQ,qBAAT,EAArB,CAAP;;AAEX,kBAAMK,QAAQrB,IAAIsB,IAAJ,CAAS;AACfC,oBAAIL,KAAKM,GADM;AAEfC,0BAAUP,KAAKO;AAFA,aAAT,EAGJ1B,OAAO2B,SAHH,CAAd;;AAKApB,gBAAIS,IAAJ,CAASM,KAAT;AACC,SAVL,EAUOM,OAAOrB,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,QAAQ,yCAAT,EAAmDW,GAAnD,EAArB,CAVd;AAYH,KAjBD;AAkBP,CAtBD;;AAwBA,eAAezB,MAAf","file":"auth.js","sourcesContent":["import express from 'express';\nimport config from '../config';\nimport jwt from 'jsonwebtoken';\n\nimport { User } from '../models/user';\n\nlet router = express.Router();\n\nrouter.post('/', (req, res) => {\n    \n    const { identifier, password } = req.body;\n        \n        User.findUser( identifier, identifier )\n        .then(users => {\n            if(!users.length) return res.status(401).json({ errors: {form: 'Invalid Credentials'}});\n            \n            const user = users[0];\n            user.comparePasswords(password, match => {\n                \n                if(!match) return res.status(401).json({errors: 'Invalid Credentials'});\n                \n                const token = jwt.sign({\n                        id: user._id,\n                        username: user.username\n                        },config.jwtSecret);\n                        \n                res.json(token);                            \n                }, err => res.status(500).json({errors: 'internal problem with saving the user: ',err})\n            );\n        }); \n});\n\nexport default router;"]}