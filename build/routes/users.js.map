{"version":3,"sources":["../../src/routes/users.js"],"names":["express","isEmpty","Validator","argon2","require","crypto","saveNewUser","config","jwt","router","Router","User","otherValidations","data","errors","Object","keys","forEach","item","isEmail","email","equals","password","psConfirm","isValid","validateInput","username","findUser","then","users","user","name","catch","err","console","error","log","get","req","res","identifier","params","json","status","post","body","Error","statusCode","token","sign","id","_id","jwtSecret"],"mappings":"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","file":"users.js","sourcesContent":["import express  from 'express';\nimport { isEmpty } from 'lodash';\nimport Validator from 'validator';\n\n//import { sendVerificationEmail } from '../mail';\nconst argon2 = require('argon2');\n\nimport crypto from 'crypto';\nimport { saveNewUser } from '../utils';\nimport config from '../config';\nimport jwt from 'jsonwebtoken';\n\nlet router = express.Router();\n\n\nimport { User } from '../models/user';\n//User.find().remove(function(){console.log(\"removed\")});\n\n\nfunction otherValidations(data) {\n        \n       let errors = {};\n        \n       Object.keys(data).forEach((item) => {\n           if(isEmpty(data[item])){\n              errors[item] = \"This field is required\";\n           }\n       });\n       \n       if(!Validator.isEmail(data.email)) {\n         errors.email = 'Invalid Email address';\n       }\n      \n      if(!Validator.equals(data.password,data.psConfirm)) {\n        errors.psConfirm = 'Passwords must match';\n      }\n        \n      return {\n        errors,\n        isValid: isEmpty(errors)\n      }\n}\n\nfunction validateInput( data, otherValidations ) {\n\n    let { errors } = otherValidations( data );\n    const { username, email } = data;\n    \n    return User.findUser( username, email )\n            .then(users => {\n                   let user = users[0];\n                   if(user){\n                        if(user.name === username) errors.username = \"This username already exists.\";\n                        if(user.email === email) errors.email = \"This email already exists.\";\n                   }\n                }).then(()=>{\n                    return { errors,\n                             isValid: isEmpty(errors)\n                            };\n                }).catch(err=>{\n                    console.error(err);\n                    console.log('no user was found in our data base.');\n                });\n\n}\n\nrouter.get('/:identifier',(req,res) => {\n    const { identifier } = req.params;\n    User.findUser( identifier, identifier )\n    .then( users => res.json(users[0]), \n           err => res.status(401).json('no user found: ',err)\n        );\n});\n\nrouter.get('/',()=>{\n    console.log('kjhkjhkh');\n});\nrouter.post('/',(req,res) => {\n    validateInput(req.body,otherValidations).then(({ errors, isValid }) => {\n\n         if(isValid) {\n            User.saveNewUser(req.body, ( err,user ) => {\n                \n                if(err) { \n                    let error = new Error();\n                    error.statusCode = err.statusCode;\n                    return res.status(error.statusCode).json(error);}\n                \n                const token = jwt.sign({\n                                    id: user._id,\n                                    username: user.username\n                                    },config.jwtSecret);\n                res.json(token);\n                }, err=>{ res.status(401).json('invalid credentials'); }\n            )\n         }\n         else{\n             res.status(400).json(errors);\n         }\n    });\n    \n});\n\nexport default router;"]}