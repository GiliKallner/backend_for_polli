{"version":3,"sources":["../../src/models/user.js"],"names":["mongoose","require","Schema","argon2","uniqueValidator","user","username","type","String","unique","required","email","password","pre","next","isModified","hash","then","Error","getUpdate","$set","methods","comparePasswords","candidatePassword","callback","verify","plugin","statics","findUser","name","find","$or","saveNewUser","create","err","save","User","model"],"mappings":"AAAA,MAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,MAAMC,SAASF,SAASE,MAAxB;AACA,MAAMC,SAASF,QAAQ,QAAR,CAAf;AAAA,MACMG,kBAAkBH,QAAQ,2BAAR,CADxB;;AAGA,MAAMI,OAAO,IAAIH,MAAJ,CAAW;AAChBI,kBAAU,EAAEC,MAAKC,MAAP,EAAeC,QAAQ,IAAvB,EAA6BC,UAAU,IAAvC,EADM;AAEhBC,eAAO,EAAEJ,MAAMC,MAAR,EAAgBC,QAAQ,IAAxB,EAA8BC,UAAU,IAAxC,EAFS;AAGhBE,kBAAU,EAAEL,MAAMC,MAAR,EAAgBE,UAAU,IAA1B;AAHM,CAAX,CAAb;;AAMAL,KAAKQ,GAAL,CAAS,MAAT,EAAiB,UAAUC,IAAV,EAAiB;;AAE1B,YAAI,CAAC,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC,OAAOD,MAAP;;AAElCX,eAAOa,IAAP,CAAa,KAAKJ,QAAlB,EACCK,IADD,CACOD,QAAQ;AACP,oBAAKA,IAAL,EAAY;AACJ,6BAAKJ,QAAL,GAAgBI,IAAhB;AACAF;AACP,iBAHD,MAIK,OAAOA,KAAK,IAAII,KAAJ,CAAU,6BAAV,CAAL,CAAP;AACZ,SAPD;AAQP,CAZD;;AAcAb,KAAKQ,GAAL,CAAS,QAAT,EAAmB,UAAUC,IAAV,EAAiB;AAC5B,cAAMF,WAAW,KAAKO,SAAL,GAAiBC,IAAjB,CAAsBR,QAAvC;AACA,YAAI,CAACA,QAAL,EAAe,OAAOE,MAAP;;AAEfX,eAAOa,IAAP,CAAaJ,QAAb,EACCK,IADD,CACOD,QAAM;AACL,oBAAKA,IAAL,EAAY;AACJ,6BAAKJ,QAAL,GAAgBI,IAAhB;AACAF;AACP,iBAHD,MAIK,OAAOA,KAAK,IAAII,KAAJ,CAAU,6BAAV,CAAL,CAAP;AACZ,SAPD;AAQP,CAZD;;AAcAb,KAAKgB,OAAL,CAAaC,gBAAb,GAAgC,UAASC,iBAAT,EAA4BC,QAA5B,EAAsC;AAC9DrB,eAAOsB,MAAP,CAAc,KAAKb,QAAnB,EAA6BW,iBAA7B,EACSN,IADT,CACcO,QADd;AAEP,CAHD;;AAKAnB,KAAKqB,MAAL,CAAYtB,eAAZ;;AAGAC,KAAKsB,OAAL,GAAe;;AAEXC,kBAAU,UAAWC,IAAX,EAAiBlB,KAAjB,EAAyB;AACvB,uBAAO,KAAKmB,IAAL,CAAU,EAAEC,KAAI,CAAE,EAAC,YAAWF,IAAZ,EAAF,EAAsB,EAAC,SAAQlB,KAAT,EAAtB,CAAN,EAAV,CAAP;AACX,SAJU;;AAMXqB,qBAAa,UAAW3B,IAAX,EAAiBmB,QAAjB,EAA4B;AACrC,sBAAM,EAAElB,QAAF,EAAYK,KAAZ,EAAmBC,QAAnB,KAAgCP,IAAtC;AACA,qBAAK4B,MAAL,CAAa,EAAE3B,UAAWA,QAAb,EAAuBK,OAAQA,KAA/B,EAAsCC,UAAWA,QAAjD,EAAb,EACC,CAACsB,GAAD,EAAM7B,IAAN,KAAe;AACR,4BAAG6B,GAAH,EAAQ,OAAOV,SAASU,GAAT,EAAc,IAAd,CAAP;AACR7B,6BAAK8B,IAAL,CAAUX,QAAV;AAAoB,iBAH5B;AAIH;;AAZU,CAAf;;AAgBA,OAAO,MAAMY,OAAQpC,SAASqC,KAAT,CAAe,MAAf,EAAuBhC,IAAvB,CAAd","file":"user.js","sourcesContent":["const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\nconst argon2 = require('argon2'),\n      uniqueValidator = require('mongoose-unique-validator');\n\nconst user = new Schema({\n        username: { type:String, unique: true, required: true},\n        email: { type: String, unique: true, required: true },\n        password: { type: String, required: true }\n    });\n    \nuser.pre('save', function( next ) {\n        \n        if (!this.isModified('password')) return next();\n\n        argon2.hash( this.password )\n        .then( hash => {\n                if ( hash ) {\n                        this.password = hash;\n                        next();\n                }\n                else return next(new Error('unable to hash the password'));\n        });\n});\n\nuser.pre('update', function( next ) {\n        const password = this.getUpdate().$set.password;\n        if (!password) return next();\n        \n        argon2.hash( password )\n        .then( hash=>{\n                if ( hash ) {\n                        this.password = hash;\n                        next();\n                }\n                else return next(new Error('unable to hash the password'));\n        });\n});\n\nuser.methods.comparePasswords = function(candidatePassword, callback) {\n        argon2.verify(this.password, candidatePassword)\n                .then(callback)\n};\n\nuser.plugin(uniqueValidator);\n\n\nuser.statics = {\n    \n    findUser: function ( name, email ) {\n                return this.find({ $or:[ {'username':name }, {'email':email } ]});\n    },\n    \n    saveNewUser: function ( user, callback ) {\n        const { username, email, password } = user;\n        this.create( { username : username, email : email, password : password }\n        ,(err, user) => {\n                if(err) return callback(err, null);\n                user.save(callback)});\n    }\n    \n};\n\nexport const User =  mongoose.model('User', user);\n\n"]}