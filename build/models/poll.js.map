{"version":3,"sources":["../../src/models/poll.js"],"names":["mongoose","require","Schema","PollOption","option","type","String","required","votes","Number","default","poll","owner","Types","ObjectId","ref","createdAt","Date","now","question","options","set","getters","virtual","statics","getPollById","pollId","callback","findById","exec","getUsersPolls","userId","find","saveNewPoll","saveData","user_id","create","err","created","console","error","save","updatePoll","updatedData","poll_id","then","deletePoll","remove","getPolls","aggregate","$project","sum","$sum","concat","polls","populate","path","select","getAllPolls","$sort","getRecentPolls","$limit","getMostPopularPolls","vote","optionId","updateOne","_id","$inc","Poll","model"],"mappings":"AAAA,MAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,MAAMC,SAASF,SAASE,MAAxB;;AAEA,OAAO,MAAMC,aAAa,IAAID,MAAJ,CAAW;AAC7BE,gBAAQ,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EADqB;AAE7BC,eAAO,EAAEH,MAAMI,MAAR,EAAgBC,SAAS,CAAzB;AAFsB,CAAX,CAAnB;;AAMP,MAAMC,OAAO,IAAIT,MAAJ,CAAW;AAChBU,eAAO,EAAEP,MAAMH,OAAOW,KAAP,CAAaC,QAArB,EAA+BC,KAAK,MAApC,EADS;AAEhBC,mBAAW,EAACX,MAAMY,IAAP,EAAaP,SAASO,KAAKC,GAA3B,EAFK;AAGhBC,kBAAU,EAACd,MAAMC,MAAP,EAAeC,UAAU,IAAzB,EAHM;AAIhBa,iBAAS,CAAEjB,UAAF;AAJO,CAAX,CAAb;;AAQAQ,KAAKU,GAAL,CAAS,QAAT,EAAmB,EAAEC,SAAS,IAAX,EAAiBC,SAAS,IAA1B,EAAnB;;AAGAZ,KAAKa,OAAL,GAAe;;AAECC,qBAAa,UAAUC,MAAV,EAAkBC,QAAlB,EAA6B;AACpC,qBAAKC,QAAL,CAAcF,MAAd,EAAsBG,IAAtB,CAA2BF,QAA3B;AACL,SAJF;;AAMCG,uBAAe,UAAUC,MAAV,EAAkBJ,QAAlB,EAA4B;AACnC,qBAAKK,IAAL,CAAU,EAAEpB,OAAMmB,MAAR,EAAV,EAA4B,4BAA5B,EAA0DF,IAA1D,CAA+DF,QAA/D;AACP,SARF;;AAUCM,qBAAc,UAAWC,QAAX,EAAqBP,QAArB,EAAgC;AACtC,sBAAM,EAAER,QAAF,EAAYC,OAAZ,EAAqBe,OAArB,KAAiCD,QAAvC;;AAEA,qBAAKE,MAAL,CAAY,EAAEjB,UAAWA,QAAb,EAAuBC,SAAUA,OAAjC,EAA2CR,OAAOuB,OAAlD,EAA2DnB,WAAUC,KAAKC,GAAL,EAArE,EAAZ,EACS,CAACmB,GAAD,EAAMC,OAAN,KAAkB;AACX,4BAAGD,GAAH,EAAQ;AAAEE,wCAAQC,KAAR,CAAc,gBAAd,EAA+BH,GAA/B,EAAqC,MAAMA,GAAN;AAAY;AAC3D,+BAAOC,QAAQG,IAAR,CAAad,QAAb,CAAP;AACP,iBAJT;AAKP,SAlBF;;AAoBCe,oBAAa,UAAWC,WAAX,EAAwBC,OAAxB,EAAiCjB,QAAjC,EAA4C;AACjD,oBAAI,EAAER,QAAF,EAAYC,OAAZ,KAAwBuB,WAA5B;;AAEA,qBAAKf,QAAL,CAAcgB,OAAd,EAAsB,CAACP,GAAD,EAAK1B,IAAL,KAAY;AAChC,4BAAG0B,GAAH,EAAQ,OAAOV,SAASU,GAAT,EAAa,IAAb,CAAP;;AAER,4BAAGlB,QAAH,EAAaR,KAAKQ,QAAL,GAAgBA,QAAhB;AACb,4BAAGC,OAAH,EAAYT,KAAKS,OAAL,GAAeA,OAAf;;AAEXT,6BAAK8B,IAAL,GAAYI,IAAZ,CAAiBlB,QAAjB;AACF,iBAPD;AASP,SAhCF;;AAkCCmB,oBAAY,UAAWpB,MAAX,EAAmBC,QAAnB,EAA8B;AACvC,qBAAKC,QAAL,CAAcF,MAAd,EAAsBqB,MAAtB,CAA6BpB,QAA7B;AACF,SApCF;;AAsCCqB,kBAAU,UAAU5B,OAAV,EAAmBO,QAAnB,EAA4B;AAC9B,uBAAQ,KAAKsB,SAAL,CAAe,CAAC,EAAEC,UAAU;AACpBtC,uCAAM,CADc;AAEpBI,2CAAU,CAFU;AAGpBI,yCAAS,CAHW;AAIpBD,0CAAU,CAJU;AAKpBgC,qCAAK,EAAEC,MAAK,gBAAP;AALe;AAAZ,iBAAD,EAOZC,MAPY,CAOLjC,OAPK,CAAf,EAOoB,CAAEiB,GAAF,EAAOiB,KAAP,KAAkB;AACnC,4BAAGjB,GAAH,EAAQ,OAAOV,SAAUU,GAAV,EAAe,IAAf,CAAP;AACR,6BAAKkB,QAAL,CAAeD,KAAf,EAAsB,EAAEE,MAAM,OAAR,EAAiBC,QAAQ,eAAzB,EAAtB,EAAkE9B,QAAlE;AACF,iBAVD,CAAR;AAWP,SAlDF;;AAoDC+B,qBAAa,UAAU/B,QAAV,EAAqB;AAC1B,uBAAO,KAAKqB,QAAL,CAAc,CAAC,EAAEW,OAAO,EAAE,aAAa,CAAC,CAAhB,EAAT,EAAD,CAAd,EAAgDhC,QAAhD,CAAP;AACP,SAtDF;;AAwDCiC,wBAAgB,UAAWjC,QAAX,EAAsB;AAC9B,uBAAO,KAAKqB,QAAL,CAAc,CAAC,EAAEW,OAAO,EAAE,aAAa,CAAC,CAAhB,EAAT,EAAD,EAAgC,EAAEE,QAAQ,CAAV,EAAhC,CAAd,EAA8DlC,QAA9D,CAAP;AACP,SA1DF;;AA4DCmC,6BAAqB,UAAWnC,QAAX,EAAsB;AACpC,uBAAO,KAAKqB,QAAL,CAAc,CAAC,EAAEW,OAAO,EAAE,OAAO,CAAC,CAAV,EAAa,aAAa,CAAC,CAA3B,EAAT,EAAD,EAA2C,EAAEE,QAAQ,CAAV,EAA3C,CAAd,EAAwElC,QAAxE,CAAP;AACN,SA9DF;;AAgECoC,cAAM,UAAWnB,OAAX,EAAoBoB,QAApB,EAA8BrC,QAA9B,EAAyC;AACvC,qBAAKsC,SAAL,CAAgB,EAAEC,KAAKtB,OAAP,EAAgB,eAAeoB,QAA/B,EAAhB,EACgB,EAAEG,MAAM,EAAE,mBAAoB,CAAtB,EAAR,EADhB,EACoDxC,QADpD;AAGP;;AApEF,CAAf;;AA0EA,OAAO,MAAMyC,OAAQpE,SAASqE,KAAT,CAAe,MAAf,EAAuB1D,IAAvB,CAAd","file":"poll.js","sourcesContent":["const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n                                                                                                \nexport const PollOption = new Schema({\n        option: { type: String, required: true },\n        votes: { type: Number, default: 0 }\n});\n\n\nconst poll = new Schema({\n        owner: { type: Schema.Types.ObjectId, ref: 'User' },\n        createdAt: {type: Date, default: Date.now },\n        question: {type: String, required: true},\n        options: [ PollOption ]\n});\n\n\npoll.set('toJSON', { getters: true, virtual: true});\n\n\npoll.statics = {\n                \n                getPollById: function( pollId, callback ) {\n                      this.findById(pollId).exec(callback);  \n                },\n                \n                getUsersPolls: function( userId, callback ){\n                        this.find({ owner:userId }, 'question options createdAt').exec(callback);\n                },\n                \n                saveNewPoll : function ( saveData, callback ) {\n                        const { question, options, user_id } = saveData;\n                        \n                        this.create({ question : question, options : options , owner: user_id, createdAt:Date.now() }\n                                ,(err, created) => {\n                                        if(err) { console.error('saving error: ',err); throw err; }\n                                        return created.save(callback);\n                                });\n                },\n                \n                updatePoll : function ( updatedData, poll_id, callback ) {\n                        let { question, options } = updatedData;\n                     \n                        this.findById(poll_id,(err,poll)=>{\n                          if(err) return callback(err,null);\n                         \n                          if(question) poll.question = question;\n                          if(options) poll.options = options;\n                          \n                           poll.save().then(callback)\n                        });\n                        \n                },\n        \n                deletePoll: function ( pollId, callback ) {\n                   this.findById(pollId).remove(callback);\n                },\n                \n                getPolls: function( options, callback){\n                        return  this.aggregate([{ $project: { \n                                        owner:1,\n                                        createdAt:1,\n                                        options: 1,\n                                        question: 1,\n                                        sum: { $sum:'$options.votes' },\n                                        } \n                                }].concat(options),(( err, polls ) => {\n                                   if(err) return callback( err, null );\n                                   this.populate( polls, { path: \"owner\", select: \"username -_id\" }, callback );\n                                }));  \n                },\n                \n                getAllPolls: function( callback ) {\n                        return this.getPolls([{ $sort: { 'createdAt': -1 } }], callback );\n                },\n                \n                getRecentPolls: function ( callback ) {\n                        return this.getPolls([{ $sort: { 'createdAt': -1 } },{ $limit: 3 }], callback );\n                },\n                \n                getMostPopularPolls: function ( callback ) {\n                       return this.getPolls([{ $sort: { 'sum' :-1, 'createdAt': -1 } },{ $limit: 3 }],callback);\n                },\n                \n                vote: function ( poll_id, optionId, callback ) {\n                        this.updateOne( { _id: poll_id, 'options._id': optionId },\n                                        { $inc: { 'options.$.votes' : 1 }}, callback );\n                                \n                }\n                \n        };\n\n\n\nexport const Poll =  mongoose.model('Poll', poll); \n"]}