{"version":3,"sources":["../src/utils.js"],"names":["jose","argon2","toPem","User","keystore","JWK","createKeyStore","promises","generate","kid","signJwt","username","_id","signingKey","get","opts","algorithm","exp","Date","now","handlers","payload","id","admin","use","alg","Promise","res","JWS","createSign","update","JSON","stringify","final","then","x","signAndEncryptJwt","user","encryptionKey","ecryptionOptions","format","contentAlg","promise","resolve","reject","signedJwt","encrypt","JWE","createEncrypt","err","console","error","saveNewUser","email","password","rej","create_password","hash","pass","save","generateKeys","keys","keysInPem","Object","forEach","key","publicKey","toJSON","privateKey","clientKeys","dbKeys","saveUser","all","finalJose","token","catch","decrepteAndValidate","jwt","public_siginig_key","encrypt_private_key","decrypt_jwt","createDecrypt","decrypt","decrypted","unVerified","parse","createVerify","verify","result","validateTokens","asKey","log"],"mappings":"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","file":"utils.js","sourcesContent":["\nimport jose from 'node-jose';\nimport argon2 from 'argon2';\nimport toPem from 'jwk-to-pem';\n\n//import { salt } from './config'\nimport { User } from './models/user';\n\n\nconst keystore = jose.JWK.createKeyStore();\n\nconst promises = [\n    keystore.generate('EC', 'P-256', { kid: '1' }),\n    keystore.generate('RSA', 2048, { kid: '2' })\n];\n\n/* ********************************************************************************** */\n\nexport const signJwt = ({ username, _id }) =>{\n    const signingKey = keystore.get('1');\n   \n    const opts = { \n       algorithm: 'ES256',\n       exp: Date.now()+( 1000 ),\n       handlers: {\n        \"exp\": true\n       }\n    };\n   \n    const payload = {\n                username : username,\n                id: _id,\n                admin: true,\n                use:'sig',\n                alg:'A128GCM',\n    };\n    \n    return new Promise(res => { \n                    jose.JWS.createSign(opts,signingKey)\n                    .update(JSON.stringify(payload))\n                    .final().then(x => res(x));\n        \n    })\n}\n\n/* ********************************************************************************** */\n\nconst signAndEncryptJwt = (user) => {\n        \n        const encryptionKey = keystore.get('2');\n        const ecryptionOptions = {  \n                        format: 'compact',\n                        contentAlg: 'A128CBC-HS256'\n        };\n        \n        const promise = new Promise((resolve, reject) => {\n          \n        signJwt(user)\n            .then( \n            signedJwt =>{\n                const encrypt = jose.JWE.createEncrypt(ecryptionOptions, encryptionKey)\n                        .update(JSON.stringify(signedJwt))\n                        .final();\n                resolve(encrypt);\n            },\n            err => {console.error('Signing error: ',err); reject(err) });\n        });\n        \n        return promise;\n};\n\n/* ********************************************************************************** */\n\nexport const saveNewUser = ( user ) => {\n    \n    const {username, email, password } = user;\n    \n    const promise = new Promise ((res, rej) => {\n           \n                const create_password = argon2.hash( password );\n                create_password.then( pass => {\n\n                    let user = {\n                       'username': username, \n                       'email': email,\n                       'password': pass \n                    };\n                    \n                    new User(user).save((err, user) => {\n                            if(err) return rej(err);\n                            res(user); \n                    });\n                }); \n    });\n    return promise;\n};\n\n/* ********************************************************************************** */\n\nconst generateKeys = () =>{\n    const keys = {\n        signingKey : keystore.get('1'),\n        encryptionKey : keystore.get('2')\n    }\n                    \n    let keysInPem = {};\n    Object.keys(keys).forEach(key => {\n        keysInPem[key] = {\n                    publicKey: toPem(keys[key].toJSON()),\n                    privateKey: toPem(keys[key].toJSON(true),{'private':true})\n        };\n    });\n\n    return {\n        clientKeys : [ keysInPem.encryptionKey.privateKey, keysInPem.signingKey.publicKey ],\n        dbKeys : [ keysInPem.encryptionKey.publicKey, keysInPem.signingKey.privateKey ]\n    };\n};\n\n/* ********************************************************************************** */\n\nexport const saveUser = (user, update) =>{\n  \n    const promise = new Promise((resolve, reject ) => {\n   \n        Promise.all(promises)\n        .then(()=>{\n                const { clientKeys, dbKeys } = generateKeys();\n                saveNewUser( user, dbKeys , update )\n                .then(user => signAndEncryptJwt(user))\n                .then(finalJose => resolve({\n                                        keys:clientKeys, \n                                        token: finalJose\n                                    }),\n                                    error => { console.error('error ocured during signing/encrition process: ',error); reject(error)});\n                },error =>{console.error('error ocured during creating keys: ',error); reject(error)}\n        );\n    }).catch(error => {console.error('error ocured during creating keys or other: ',error);});\n    \n    return promise;\n};\n\n/* ********************************************************************************** */\n\nconst decrepteAndValidate = ( jwt, [ public_siginig_key, encrypt_private_key ] ) => {\n    \n    const promise = new Promise(( resolve, reject ) => {\n        \n        const decrypt_jwt = jose.JWE.createDecrypt(encrypt_private_key)\n                                    .decrypt(jwt);\n            \n        decrypt_jwt.then(decrypted => {\n             \n                let unVerified = JSON.parse(decrypted.payload);\n\n                jose.JWS.createVerify(public_siginig_key)\n                    .verify(unVerified)\n                    .then(result => {\n                        resolve(JSON.parse(result.payload));\n                        },err => reject(err));        \n                    });\n        });\n        \n    return promise;\n};\n\n/* ********************************************************************************** */\n\nconst validateTokens = ( keys , token ) => {\n    const [ encryptionKey, signingKey ] = keys;\n\n    const promises = [\n            jose.JWK.asKey(signingKey,\"pem\"),\n            jose.JWK.asKey(encryptionKey,\"pem\")\n        ];\n    \n    Promise.all(promises).then(\n        keys => {\n            decrepteAndValidate(token, keys)\n            .then(result => console.log('result: ',result))\n            .catch(err => console.error('result parsing error: ', err));\n        },\n        err => console.error('error in creating keys from credentials: ',err)\n    );\n};\n\n          \n \n    "]}